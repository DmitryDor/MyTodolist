{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/errorUtils.ts","features/Login/login-reducer.ts","app/appReducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/errorSnackbar/errorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLogenIn","setIsLoggedInAC","isLogged","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","description","priority","startDate","deadline","then","res","resultCode","module","updateTaskAC","catch","console","warn","AddItemForm","React","memo","disabled","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","todolist","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLoggedIn","login","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","action","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","app","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","name","getFieldProps","errors","FormControlLabel","control","App","initialized","isLoggedInHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","exact","render","top","left","CircularProgress","rootReducer","combineReducers","todoListId","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.571ae4c2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppExample is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '85f5b2d8-12c7-48ad-9f88-79f9075e9df3'\r\n    }\r\n})\r\n\r\n\r\n// api\r\n\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTasks(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTasks(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTasks(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType){\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n    },\r\n    authMe() {\r\n        return instance.get<ResponseType<{id?: number, email?: string, login?: string}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport  type  ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/appReducer\";\r\nimport {ResponseType} from '../api/todolist-api'\r\n\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<SetAppErrorActionType>) => {\r\n    error\r\n        ? dispatch(setAppErrorAC(error.message))\r\n        : dispatch(setAppErrorAC('some error'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/appReducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\ntype InitialStateType = {\r\n    isLogenIn: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    isLogenIn: false\r\n}\r\n\r\nexport type setIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\n\r\ntype ActionsType = setIsLoggedInType | SetAppStatusActionType | SetAppErrorActionType\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"Login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLogenIn: action.isLogged}\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// AC\r\n\r\nexport const setIsLoggedInAC = (isLogged: boolean) => ({type: 'Login/SET-IS-LOGGED-IN', isLogged} as const)\r\n\r\n// TC\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(dispatch(setAppStatusAC('loading')))\r\n    authAPI.login(data).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('idle'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(dispatch(setAppStatusAC('loading')))\r\n    authAPI.logout().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('idle'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {handleServerNetworkError} from \"../utils/errorUtils\";\r\nimport {setIsLoggedInAC, setIsLoggedInType} from \"../features/Login/login-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'App/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'App/SET-ERROR': {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"App/SET-INITIALIZED\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'App/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'App/SET-ERROR', error} as const)\r\nexport const setInitializedAC = (value: boolean) => ({type: 'App/SET-INITIALIZED', value} as const)\r\n\r\n// TC\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    return authAPI.authMe().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n        dispatch(setInitializedAC(true))\r\n\r\n\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof setInitializedAC>\r\n    | setIsLoggedInType\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, SetAppStatusActionType, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n\r\n        case \"SET-TODOLIST\":\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case \"TODOLIST/CHANGE-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//AC\r\n\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: \"SET-TODOLIST\", todolists} as const)\r\nexport const changeTodolistEntityStatussAC = (status: RequestStatusType, id: string) => ({\r\n    type: 'TODOLIST/CHANGE-STATUS',\r\n    status,\r\n    id\r\n} as const)\r\n\r\n\r\n//TC\r\n\r\nexport const setTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then(res => {\r\n            debugger\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('idle'))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatussAC('loading', todolistId))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('idle'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    dispatch(setAppErrorAC('some error'))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(todolistId, title))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type  TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof changeTodolistEntityStatussAC>\r\n\r\n","import {TasksStateType} from '../../trash/AppExample';\r\nimport {TaskStatuses, TaskType, todolistAPI, TodoTaskPriorities, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\nimport { SetAppErrorActionType, SetAppStatusActionType, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)\r\n            }\r\n\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.module} : t)\r\n            }\r\n\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n\r\n        case \"SET-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// AC\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, module: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    taskId,\r\n    module,\r\n    todolistId\r\n} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => ({\r\n    type: \"SET-TASKS\",\r\n    todolistId,\r\n    tasks\r\n} as const)\r\n\r\n// TC\r\n\r\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTasks(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTasks(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                /*if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('some error'))\r\n                }*/\r\n            }\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n           /* error\r\n                ? dispatch(setAppErrorAC(error.message))\r\n                : dispatch(setAppErrorAC('some error'))*/\r\n        })\r\n\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('Task not found ')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        todolistAPI.updateTasks(todolistId, taskId, apiModel).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                dispatch(setAppStatusAC('idle'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({disabled = false, ...props}: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        let newIsDoneValue = e.currentTarget.checked\r\n\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"../tasks-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    setTodolistsTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false, ...props}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLogenIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        debugger\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, []);\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, []);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                    todolist={tl}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/appReducer\";\r\n// import { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n//    ВСЁ закоментированное - пример работы с useStyles !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n/*const useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));*/\r\n\r\nexport const ErrorSnackbar = () => {\r\n    // const classes = useStyles();\r\n    // const [open, setOpen] = React.useState(false);\r\n\r\nconst dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {  // если убрать, при клике в любом месте - закроется\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    };\r\n\r\n    const error = useSelector<AppRootStateType, string | null>( state => state.app.error)\r\n\r\n    return (\r\n\r\n        // <div className={classes.root}>\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n        // </div>\r\n    );\r\n\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLogenIn)\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            },\r\n            validate: (values) => {\r\n                if (!values.email) {\r\n                    return {\r\n                        email: 'Email is required'\r\n                    }\r\n                }\r\n                if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    return {\r\n                        email: 'Invalid email address'\r\n                    }\r\n                }\r\n                if (!values.password) {\r\n                    return {\r\n                        password: 'Password is required'\r\n                    }\r\n                }\r\n                if (values.password.length < 3) {\r\n                    return {\r\n                        password: 'Password length at least 5 characters '\r\n                    }\r\n                }\r\n            },\r\n            onSubmit: values => {\r\n                dispatch(loginTC(values))\r\n            },\r\n        }\r\n    )\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name='email'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name='password'\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox name='rememberMe' {...formik.getFieldProps('rememberMe')}\r\n                                          checked={formik.values.rememberMe}\r\n                                />\r\n                            }\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from \"../api/todolist-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/errorSnackbar/errorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./appReducer\";\r\nimport {TodolistDomainType} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC, setIsLoggedInAC} from \"../features/Login/login-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: AppPropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const initialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLogenIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const isLoggedInHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!initialized) {\r\n        return <div style={{position: 'fixed', top: '30%', left: '45%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={isLoggedInHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route path={'/'} exact render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {loginReducer} from \"../features/Login/login-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login: loginReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport AppExample from \"./trash/AppExample\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n            {/*<AppExample/>*/}\r\n            {/*<App/>*/}\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}